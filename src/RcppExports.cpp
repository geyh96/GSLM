// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

// DSL_calculate_gradient
Eigen::ArrayXd DSL_calculate_gradient(Eigen::Map<Eigen::MatrixXd> alpha, Eigen::Map<Eigen::MatrixXd> Xdata, Eigen::Map<Eigen::MatrixXd> Kmatrix, double sigma2);
RcppExport SEXP _GSLM_DSL_calculate_gradient(SEXP alphaSEXP, SEXP XdataSEXP, SEXP KmatrixSEXP, SEXP sigma2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::Map<Eigen::MatrixXd> >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< Eigen::Map<Eigen::MatrixXd> >::type Xdata(XdataSEXP);
    Rcpp::traits::input_parameter< Eigen::Map<Eigen::MatrixXd> >::type Kmatrix(KmatrixSEXP);
    Rcpp::traits::input_parameter< double >::type sigma2(sigma2SEXP);
    rcpp_result_gen = Rcpp::wrap(DSL_calculate_gradient(alpha, Xdata, Kmatrix, sigma2));
    return rcpp_result_gen;
END_RCPP
}
// Calculate_Gradient_order2_Cpp
Eigen::ArrayXXd Calculate_Gradient_order2_Cpp(Eigen::Map<Eigen::MatrixXd> alpha, Eigen::Map<Eigen::MatrixXd> Xdata, Eigen::Map<Eigen::MatrixXd> Kmatrix, double sigma2, Eigen::Map<Eigen::ArrayXi> Ind1, Eigen::Map<Eigen::ArrayXi> Ind2);
RcppExport SEXP _GSLM_Calculate_Gradient_order2_Cpp(SEXP alphaSEXP, SEXP XdataSEXP, SEXP KmatrixSEXP, SEXP sigma2SEXP, SEXP Ind1SEXP, SEXP Ind2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::Map<Eigen::MatrixXd> >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< Eigen::Map<Eigen::MatrixXd> >::type Xdata(XdataSEXP);
    Rcpp::traits::input_parameter< Eigen::Map<Eigen::MatrixXd> >::type Kmatrix(KmatrixSEXP);
    Rcpp::traits::input_parameter< double >::type sigma2(sigma2SEXP);
    Rcpp::traits::input_parameter< Eigen::Map<Eigen::ArrayXi> >::type Ind1(Ind1SEXP);
    Rcpp::traits::input_parameter< Eigen::Map<Eigen::ArrayXi> >::type Ind2(Ind2SEXP);
    rcpp_result_gen = Rcpp::wrap(Calculate_Gradient_order2_Cpp(alpha, Xdata, Kmatrix, sigma2, Ind1, Ind2));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_GSLM_DSL_calculate_gradient", (DL_FUNC) &_GSLM_DSL_calculate_gradient, 4},
    {"_GSLM_Calculate_Gradient_order2_Cpp", (DL_FUNC) &_GSLM_Calculate_Gradient_order2_Cpp, 6},
    {NULL, NULL, 0}
};

RcppExport void R_init_GSLM(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
